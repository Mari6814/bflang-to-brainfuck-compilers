%{
#include "bf.h"
#include "y.tab.h"
void yyerror(const char *);
int columnno = 0;
int lineno = -1;
std::string str;

#define YY_USER_ACTION \
    if (lineno != yylineno) columnno = 0; \
    lineno = yylineno; \
    yylloc.first_line = yylloc.last_line = yylineno; \
    yylloc.first_column = columnno; \
    yylloc.last_column = columnno += yyleng;
%}
%option yylineno
%x COMMENT ML_COMMENT STR
%%
"type"  	return TYPE;

"fun" 		return FUNCTION;

"var" 		return VARIABLE;

"while"		return WHILE;

"if" 		return IF;

"else" 		return ELSE;

"return"	return RETURN;

"input"     return INPUT;

"print"     return PRINT;

"__inline"  return INLINE;

"->"		return IMPLY;

"+="		return ADD_ASSIGN;

"-="		return SUB_ASSIGN;

[a-zA-Z_][a-zA-Z0-9_]*	{   yylval.identifier = new string(yytext); return IDENTIFIER; }

[0-9]+					{   yylval.integer = atoi(yytext); return INTEGER; }

'\\n'                    {   yylval.integer = (int) '\n'; return INTEGER; }
'\\r'                    {   yylval.integer = (int) '\r'; return INTEGER; }
'\\t'                    {   yylval.integer = (int) '\t'; return INTEGER; }
'\\x[0-9a-fA-F][0-9a-fA-F]' {
                                std::stringstream ss;
                                ss << std::hex << std::string(yytext + 3);
                                ss >> yylval.integer;
                                return INTEGER;
                            }
'\\[0-9][0-9]?[0-9]?'   { yylval.integer = atoi(yytext + 2); return INTEGER; }
'\\b[0-1]{1,8}'             { yylval.integer = std::stoi(yytext + 3, nullptr, 2); return INTEGER; }
'.'                     {   yylval.integer = (int) *(yytext + 1); return INTEGER; }

\"                      {BEGIN(STR); str = ""; }
<STR>\"                 {BEGIN(INITIAL); yylval.string = new string(str); return STRING; }
<STR>.                  {str += *yytext;}

"//"					BEGIN(COMMENT);
<COMMENT>\n				BEGIN(INITIAL);
<COMMENT>.				;

"/*"					BEGIN(ML_COMMENT);
<ML_COMMENT>"*/"		BEGIN(INITIAL);
<ML_COMMENT>.           ;
<ML_COMMENT>\n          ;

[ \t\n]+ 				;

[*\-+/<>()}{,;=:.\[\]@#] return *yytext;

.						{
                            char errmsg[255] = {0};
                            strcat(&*errmsg, "Unkown character '");
                            strcat(&*errmsg, yytext);
                            strcat(&*errmsg, "'");
                            yyerror(errmsg);
                            exit(EXIT_FAILURE);
                        }

%%


int yywrap(void) {
	return 1;
}